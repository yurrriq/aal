\documentclass[a4paper,nobib,xelatex]{tufte-handout}

\title{Non-interactive AWS Azure Login}


\author{Eric Bailey}

\date{%
  20th December, 2019
  \thanks{Updated {\today} {\currenttime} GMT.}%
}

\input{preamble}

\begin{document}
\maketitle
@

\section{Password management}

For password management, use \hrefootnote{https://www.passwordstore.org/}{pass}.

<<Get the password from the store>>=
pass show "Azure AD" 2>/dev/null | head -n1
@
\marginnote{%
  This assumes \sh{Azure AD} is in the password store.%
}


On top of that, use the
\hrefootnote{https://github.com/tadfisher/pass-otp}{pass-otp} extension to
manange OTP tokens.

<<Generate an OTP token>>=
pass otp show "Azure AD"
@
\marginnote{%
  This assumes \sh{Azure AD} is configured.%
}


With these two tools, automate refreshing AWS credentials using Azure AD.


\section{Automated interaction}

Spawn a non-interactive
\hrefootnote{https://github.com/sportradar/aws-azure-login}{aws-azure-login} process,
forcing a credential refresh, even if they are still valid.

<<Spawn aws-azure-login process>>=
spawn -noecho aws-azure-login --force-refresh --no-prompt
@

\marginnote{%
  This requires the environment variable, \sh{AWS_PROFILE}, to be set,
  and \sh{~/.aws/config} to be properly configured.%
}


Alternatively, send the username...

\begin{minted}{bash}
  expect "*Username*" {
      set username [ exec pass show "Azure AD" | awk "/Username:/ { print \$2 }" ]
      send "$username\n"
  }
\end{minted}


... and duration to their respective prompts.

\begin{minted}{bash}
  expect "*Duration*" { send "8\n" }
\end{minted}


The main point of this script is to obviate the need to manually provide a
password and OTP token, letting
\hrefootnote{https://core.tcl-lang.org/expect/index}{Expect} \sh{interact} on
the user's behalf.


When prompted for the [[password]], get it from the store and \sh{send} it.

<<Send the password when expected>>=
expect "*Password:*" {
    set password [ exec <<Get the password from the store>> ]
    send "$password\r"
}
@ %def password


When prompted for an OTP token, generate one and \sh{send} it.

<<Send the OTP token when expected>>=
expect "*Verification Code:*" {
    set verification_code [ exec <<Generate an OTP token>> 2>/dev/null ]
    send "$verification_code\r"
}
@ %def verification_code


%% \section{The script}

\begin{marginfigure}[-21\baselineskip]
<<*>>=
#! /usr/bin/env expect

<<Spawn aws-azure-login process>>

<<Send the password when expected>>

<<Send the OTP token when expected>>

interact
@
\end{marginfigure}

\end{document}
